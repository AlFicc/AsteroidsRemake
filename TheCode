# Asteroids
						
class spaceshipInner(Sprite):
	def __init__(self):
		self.image = 66
		self.size = 5.5			#--> Initialises Spaceship's Inner (black) area
		self.color = Color(0,0,0)		#--> This is purely cosmetic
		self.position = player.position
	
	def update(self):
		self.position = player.position		#--> Sets the position of this object to the player's position
		self.angle = player.angle			#--> Sets the angle to player's angle
	
class spaceship(Sprite):
	class boostClass(Sprite):
		def __init__(self):
			self.image = 55
			self.color = Color(220, 0, 0)		#--> Initialises The Boost
			self.size = 0
		def onOff(self):
			if game.key('up'):			
				while self.size < 2.5:
					self.size += 0.1 if abs(2.5 - self.size) >= 0.1 else abs(2.5 - self.size) 	#--> If up key pressed, add small amounts until size is 2.5
			elif not game.key('up'):
				while self.size > 0:
					self.size -= 0.1 if abs(0 - self.size) >= 0.1 else abs(0 - self.size)		#--> If up key is not pressed, take small amounts until size is 0
		
		def update(self):
			self.onOff()					#--> Runs self function onOff()
			self.position = player.movement.position	#--> Sets position to player's movement object's position
			self.angle = player.angle + 180		#--> Sets angle to that of the player's plus 180
			self.move(3)					#--> Moves forward to give off the idea that the boost is coming out of the back of the player
	
	class shipMovement(Sprite):
		#
		def __init__(self):
			self.image = 55
			self.size = 0			#--> Ship movement object Initialisation
			self.movementSpeed = 0
			self.decelSpeed = 0.15	#--> Deceleration speed (Higher = Faster stoppage)
			self.move(1)	
		#
		def setAngle(self):
			self.angle = player.angle		#--> Sets bullet angle to that of the players
		#
		def setMove(self):
			if game.key('down'):
				self.decelSpeed = 0.45	#--> Break system, probably temporary
			elif not game.key('down'):
				self.decelSpeed = 0.15
			
			if game.key('up'):
				if self.movementSpeed != 4.5:
					if abs(self.movementSpeed - 4.5) >= 0.75:
						self.movementSpeed += 0.75			#--> Uses absolute values to function as an accelerator
					else:									
						self.movementSpeed += abs(self.movementSpeed - 4.5)
			elif not game.key('up'):
				if self.movementSpeed != 0:
					if abs(self.movementSpeed - 0) >= self.decelSpeed:
						self.movementSpeed -= self.decelSpeed			#--> The Decelerator (works in the same way as Accelerator)
					elif abs(self.movementSpeed - 0) < self.decelSpeed:
						self.movementSpeed -= abs(self.movementSpeed - 0)
			
			self.move(self.movementSpeed)			#--> Moves in the current direction at a value of the movement speed
			
			if self.position.y in (100, -100):
				self.position.y = -100 if self.position.y == 100 else 100		#--> If ship is at the top or bottom of the screen then flip it
			if self.position.x in (100, -100):
				self.position.x = -100 if self.position.x == 100 else 100		#--> If ship is at the left or right of the screen then flip it
		#
		def update(self):
			self.setMove()		#--> Calls Set Move every tick

	class bulletClass(Sprite):
		
		def __init__(self, position, angle):
			self.image = 55
			self.size = 1
			self.color = Color(255,255,255)	#--> Bullet Initialisation
			self.speed = 6				#--> Sets bullet speed 
			self.angle = angle
			self.position = position
			self.remainingLife = 25		#--> In order to stop the bullet from travelling endlessly
			self.collided = False			#--> Has the bullet collided with another object?
		#
		def checkCollision(self):
			if self.collide(meteors):		
				self.collided = True		#--> Checks for self collision with any meteors
			else:
				self.collided = False
		#
		def update(self):
			global bulletDirection
			global bullets
			if self.collided == True:			#--> If the bullet has collided with a meteor:
				bulletDirection = self.angle			#--> Set global variable 'bulletDirection' to current direction
				game.remove(self)				#--> Remove self from the game
				
			self.checkCollision()				#--> Calls function to check collision
			
			if self.remainingLife > 0:			
				self.move(self.speed)
			else:
				game.remove(self)			#--> Removes self if bullet's remaining life has reached 0
				bullets.remove(self)
			self.remainingLife -= 1
			
			
			if self.position.x in (-100, 100):
				self.position.x = 100 if self.position.x == -100 else -100		#--> If bullet is at top or bottom of screen then flip it
			if self.position.y in (-100, 100):
				self.position.y = 100 if self.position.y == -100 else -100		#--> If bullet is on left or right of screen then flip it
	
	def __init__(self):
		self.image = 66
		self.size = 6.5			#--> Spaceship basic Initialisation
		self.color = Color(255,255,255)
		self.bulletSpacer = False
		self.playerMovable = True
		
		self.movement = self.shipMovement()		#--> Creates object to control Spaceship movement
		game.add(self.movement)			#--> This is used for angle and deceleration purposes
		
		self.boost = self.boostClass()
		game.add(self.boost)
	
	#
	def checkForTurn(self):
		if game.key('left'):
			self.angle += 15	#--> Spaceship turning mechanics
		if game.key('right'):		
			self.angle -= 15	#--> Checks for left and right Key presses	
							
		if self.angle > 360:
			self.angle = 0 + (self.angle - 360)	 	#--> Resets a full loop's angle back to 0 instead of 360
		self.angle = round(self.angle)			#--> Rounds the angle to a whole number
	#
	def checkCollision(self):
		global meteors, livesCount			#--> Globalises specified variables
		if self.collide(meteors):			
			for item in meteors:
				game.remove(item)		#--> Removes all meteors when player collides with ti
			meteors = []					#--> Resets meteors list as it should be empty
			self.movement.position = Vector(0, 0)	#--> Sets player's position to center
			self.angle = 0						#--> Points player to the right
			removeLife()			#--> Runs removeLife() which handles all the required stuff to removed a life
			if livesCount == 0:
				gameOver = True			#--> Game End statement
				print('Points: ', points)			#--> Prints total points in the terminal
				self.playerMovable = False			
				endGameSequence()			#--> Runs endGameSequence()
				self.playerMovable = True	
			else:
				createMeteor(starter=True)		#--> creates a Meteor with starter parameter set to True
			
	#
	def update(self):
		global points
		global bullets
		
		#setPoints(points)
		self.checkCollision()
		self.checkForTurn()				#--> Runs Turning function
		self.position = self.movement.position	#--> Places the ship on top of self.movement (Object used to control/set movement)
				
		if game.key('up'):	
			if self.playerMovable == True:			
				self.movement.setAngle()		#--> Checks for Up Key press, runs self.movement.setAngle() if so
		if game.key('space'):
			if self.bulletSpacer == False:	
				self.bulletSpacer = True					#--> Removes the ability to hold down Shoot key and continuously fire
				self.bullet = self.bulletClass(self.position, self.angle)
				game.add(self.bullet)							#--> Creates bullet sprite; adds to game and to list of bullets
				bullets.append(self.bullet)
		elif not game.key('space'):			
			self.bulletSpacer = False	
			

class meteorClass(Sprite):

	class meteorMovement(Sprite):

		def __init__(self, stage, forcedPos=None, baseDir=None):
			self.image = 63
			self.size = 0			#--> Basic initialisation of Meteor movement
			self.stage = stage
		
			if self.stage == 1:
				self.speed = random.randint(5, 15) * gameSpeed
			elif self.stage == 2:
				self.speed = random.randint(15, 25) * gameSpeed		#--> Smaller Meteors are faster, this handles speed based on size/stage
			elif self.stage == 3:								
				self.speed = random.randint(25, 30) * gameSpeed			

			if forcedPos == None:
				self.wall = random.randint(1, 4)
				if self.wall == 1:
					self.position = Vector(random.randint(-90, 90), 100)
				elif self.wall == 2:
					self.position = Vector(random.randint(-90, 90), -100)	#--> If meteor has no predefined position
				elif self.wall == 3:								
					self.position = Vector(100, random.randint(-90, 90))		#--> Chooses a random wall to place the meteor onThen places Meteor randomly along the wall
				elif self.wall == 4:
					self.position = Vector(-100, random.randint(-90, 90))

			if self.stage == 1:
				self.angle = (self.position).angle + random.randint(10, 20)	#--> Stage 1 meteors point mostly towards the center
				if not forcedPos == None:
					self.position = forcedPos				#--> Just in case (for testing purposes)
			if self.stage in (2, 3):
				if baseDir == 'left':
					self.angle = bulletDirection + 180 + random.randint(15, 40)	#--> Stage 2 and 3 meteors point mostly in the direction of the bullet
				elif baseDir == 'right':							
					self.angle = bulletDirection + 180 - random.randint(15, 40)

				if not forcedPos == None:
					self.position = forcedPos		#--> Sets position of the meteor to the position defined as a paremeter
				self.move(15)				#--> Moves forward 15 spaces so as to avoid being instantly killed 
	

		def update(self):
			self.move(self.speed)		#--> Continuously moves forward at a rate of its own speed


	def __init__(self, stage, forcedPos=None, baseDir=None, starter=False):
		self.image = 63
		self.color = Color(255,255,255)				#--> Basic initialisation
		self.stage = stage
		self.turnSpeed = random.randint(-6, -1) if random.randint(1, 2) == 1 else random.randint(1, 6)		#--> Sets turning speed of the meteor
		self.starter = starter												#--> Random for effect/cosmetic purposes
		sizeMultiplier = 0.001

		if self.stage == 1:
			self.size = random.randint(19000, 21000) * sizeMultiplier
		elif self.stage == 2:
			self.size = random.randint(14000, 16000) * sizeMultiplier		#--> Sets size based on stage and random integer
		elif self.stage == 3:
			self.size = random.randint(9000, 11000) * sizeMultiplier

		self.meteorMove = self.meteorMovement(self.stage, forcedPos, baseDir)		#--> Creates personal movement object to handle all meteor movement
		game.add(self.meteorMove)


	def checkCollision(self):
		global newMeteor, bullets, points		#--> Globalises specified variables
		for item in bullets:
				if item.collide(self):		
					item.collided = True		#--> If bullet has collided with meteor, set bullet's "collided" variable to True
		if self.collide(bullets):
			if self.stage == 1:
				points += 50											#--> Adds 50 points for shooting big meteor
				createMeteor(2, self.position, 'left', True if self.starter == True else False)		
				createMeteor(2, self.position, 'right', True if self.starter == True else False)		#--> Creates 2 smaller replacement meteors
			elif self.stage == 2:
				points += 150											#--> Adds 150 points for shooting medium meteor
				createMeteor(3, self.position, 'left', True if self.starter == True else False)
				createMeteor(3, self.position, 'right', True if self.starter == True else False)		#--> Creates 2 smaller replacement meteors
			elif self.stage == 3:
				points += 300			#--> Adds 300 points for shooting small meteor
				newMeteor += 1				#--> Adds one to counter variable
				if self.starter == True:
					if newMeteor % 4 == 0:
						createMeteor()		#--> If counter is multiple of 4 and meteor is a starter meteor (only one on screen)
						createMeteor()			#--> Create two to replace it
						#createMeteor()
				elif self.starter == False:
					if newMeteor % 4 == 0:
						createMeteor()		#--> If not starter meteor then create one
					
			
			
			game.remove(self)		#--> Removes self from the game
			meteors.remove(self)		#--> Removes self from the meteors list

			
	
	def update(self):
		self.position = self.meteorMove.position		#--> Sets position to own Meteor Movement's position
		self.checkCollision()				#--> Runs own collision checking function
		self.angle += self.turnSpeed				#--> Adds own randomly generated turn speed to angle
		
		if self.position.x in (-100, 100):
			self.meteorMove.position.x = 100 if self.position.x == -100 else - 100		#--> If meteor is at left or right, flip
		if self.position.y in (-100, 100):
			self.meteorMove.position.y = 100 if self.position.y == -100 else -100		#--> If meteor is at top or bottom, flip

class lives(Sprite):
	def __init__(self, lifeNum, pos):
		self.tag = 1	
		self.size = 6.5
		self.image = 66					#--> Initialisation of lives class
		self.position = Vector(pos[0], pos[1])
		self.color = Color(255, 255, 255)
		self.shake = 'left' if random.randint(1, 3) == 1 else 'right'
		self.shakeSpeed = random.randint(10000, 25000) * 0.0001		#--> Shakes randomly for effect
	
	def update(self):
		if self.shake == 'left':
			if self.angle < 15:
				self.angle += self.shakeSpeed
			elif self.angle >= 15:
				self.shake = 'right'			#--> Literally just shakes lol
		elif self.shake == 'right':
			if self.angle > -15:
				self.angle -= self.shakeSpeed
			elif self.angle <= -15:
				self.shake = 'left'
	

class pointsNumber(Sprite):
	class pointsNumBack(Sprite):
		def __init__(self, pos, size, count):
			self.size = size
			self.image = 55
			self.color = Color(255,255,255)		#--> Initialisation of pointsNumberBackground Sprite
			self.position = pos
			if count == 1:
				self.position.x -= 5		#--> Adds the bracket thing to the left number of the score
				self.size += 5				#--> For effect
			elif count == len(str(points)):
				self.position.x += 5		#--> Adds the bracket thing to the right number of the score
				self.size += 5				#--> For effect
	def __init__(self, number, pos, count):
		self.size = 25
		self.color = Color(0,0,0)
		self.position = Vector(pos[0], pos[1])		#--> Initialisation of pointsNumber Sprite
		self.image = 94 + number
		
		self.background = self.pointsNumBack(self.position, self.size / 1.5, count)	
		game.add(self.background)								#--> Creates own background sprite
		
class blankSprite(Sprite):
	def __init__(self, image, size, colour, pos):
		self.image = image
		self.size = size				#--> Blank sprite for design/effect purposes
		self.color = Color(colour)
		self.position = Vector(pos[0], pos[1])	


def createMeteor(stage=1, forcedPos=None, baseDir=None, starter=False):
	global gameSpeed
	if gameSpeed < 0.15:
		gameSpeed += 0.001			#--> Increases game speed based on amount of meteors destroyed
	else:
		gameSpeed += 0.0001			#--> Once number is reached, decrease much slower
	
	meteor = meteorClass(stage, forcedPos, baseDir, starter)	#--> Creates meteor using own parameters
	meteors.append(meteor)						#--> Adds meteor to list
	game.add(meteor)							#--> Adds meteor to game

def removeLife():
	global livesList, livesCount
	livesCount -= 1					#--> Removes a life
	game.remove(livesList[len(livesList) - 1])
	del livesList[len(livesList) - 1]
	
def setPoints(points):
	for j in range(len(str(points))):
		newPointNum = pointsNumber(int(str(points)[j]), (-95 + j * 9, 93))	#--> This was going to be used to display the score in the top left
		game.add(newPointNum)									#--> However the game became too laggy to play, and so it was scrapped

def endGameSequence():
	for i in range(len(str(points))):
		newPointNum = pointsNumber(int(str(points)[i]), ((0 - (len(str(points)) / 2) * 16.25) + (i * 16.25) + (8.125 if len(str(points)) % 2 == 0 else 0), 20), i + 1) #--> Handles end game and displaying score
		game.add(newPointNum)
	for i in range(3):
		Trophy = blankSprite(76, 5 if i in (0, 2) else 8, Color(255, 255, 255), (-8 + 8* i, 5))		#--> Trophies under score for design/effect, looks pretty cool in my opinion
		game.add(Trophy)
	
		
			
points = 0
bullets = []
meteors = []
gameSpeed = 0.075		#--> Setting all of the main variables
newMeteor = 0
bulletDirection = 0		
livesCount = 4
livesList = []

for l in range(livesCount):
	life = lives(l + 1, (-93 + l * 10, 95))
	livesList.append(life)			#--> Adds the lives to the top left of the screen
	game.add(life)
	

player = spaceship()
game.add(player)				#--> Adding player and player inner to the game
playerInner = spaceshipInner()
game.add(playerInner)

createMeteor(starter=True)			#--> Start the game (add a Starter meteor)

game.background = Color(0,0,0)		#--> Sets the background to Black
game.start()				#--> Starts the game.
			
	
